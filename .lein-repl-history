ls
(find-doc stream)
(find-doc "stream")
(doc range)
(range 0 5)
(range 1 10)
(mod 4 1)
(mod 4 2)
(mod 4 3)
(mod 4 4)
(mod 5 4)
(mod 5 3)
(mod 5 2)
(mod 5 1)
(= 1 1)
(= 1 2)
(= 1 0)
(= 0 0)
(doc if)
(doc load)
(load)
(load core.21)
(load "src/clj/core/21.clj")
(load "core/21.clj")
(load "src/clj/core/21.clj")
(load "/src/clj/core/21.clj")
(load "/core/21.clj")
(load "/src/core/21.clj")
(load "/clj/core/21.clj")
(load "/clj/core/21")
(load "/core/21")
(require 'core.21)
(doc divs
)
(doc core/21.divs)
(core.21/divs
)
(core.21/divs 1 5 [])
(load "/core/21")
(require 'core.21)
(core.21/divs 1 5 [])
(defn poo [x] (when (< x 5) x) (recur (inc x)))
(poo 10)
(defn poo [x] (when (> x 5) x) (recur (inc x)))
(poo 10)
(doc when)
(defn poo [x] (if (> x 5) x (recur (inc x)))
)
(poo 10)
(poo 5)
(poo 4)
(load "/core/21")
(require 'core.21)
(core.21/divs 1 5 [])
(core.21/divs 1 10 [])
(core.21/divs 1 100 [])
(core.21/divs 1 220 [])
(load "/core/21")
(core.21/divs 1 10 [])
(core.21/divs 1 220 [])
(conj [] [1 2 1])
(conj [] 1)
(conj [1] 2)
(reduce + [1 3])
(rest (range 0 0))
(range 0 0)
(range 0 1)
(range 1 1)
(range 1 2)
(first (range 1 2))
(rest (range 1 2))
(doc empty)
(doc empty?)
(rest (range 1 2))
(empty? (rest (range 1 2)))
(val {1 2})
{1 2}
a {1 2}
:a {1 2}
(key :a)
(key {1 2})
(get {1 2} 1)
