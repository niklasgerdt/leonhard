ls
(find-doc stream)
(find-doc "stream")
(doc range)
(range 0 5)
(range 1 10)
(mod 4 1)
(mod 4 2)
(mod 4 3)
(mod 4 4)
(mod 5 4)
(mod 5 3)
(mod 5 2)
(mod 5 1)
(= 1 1)
(= 1 2)
(= 1 0)
(= 0 0)
(doc if)
(doc load)
(load)
(load core.21)
(load "src/clj/core/21.clj")
(load "core/21.clj")
(load "src/clj/core/21.clj")
(load "/src/clj/core/21.clj")
(load "/core/21.clj")
(load "/src/core/21.clj")
(load "/clj/core/21.clj")
(load "/clj/core/21")
(load "/core/21")
(require 'core.21)
(doc divs
)
(doc core/21.divs)
(core.21/divs
)
(core.21/divs 1 5 [])
(load "/core/21")
(require 'core.21)
(core.21/divs 1 5 [])
(defn poo [x] (when (< x 5) x) (recur (inc x)))
(poo 10)
(defn poo [x] (when (> x 5) x) (recur (inc x)))
(poo 10)
(doc when)
(defn poo [x] (if (> x 5) x (recur (inc x)))
)
(poo 10)
(poo 5)
(poo 4)
(load "/core/21")
(require 'core.21)
(core.21/divs 1 5 [])
(core.21/divs 1 10 [])
(core.21/divs 1 100 [])
(core.21/divs 1 220 [])
(load "/core/21")
(core.21/divs 1 10 [])
(core.21/divs 1 220 [])
(conj [] [1 2 1])
(conj [] 1)
(conj [1] 2)
(reduce + [1 3])
(rest (range 0 0))
(range 0 0)
(range 0 1)
(range 1 1)
(range 1 2)
(first (range 1 2))
(rest (range 1 2))
(doc empty)
(doc empty?)
(rest (range 1 2))
(empty? (rest (range 1 2)))
(val {1 2})
{1 2}
a {1 2}
:a {1 2}
(key :a)
(key {1 2})
(get {1 2} 1)
(load 'core/21.cljs)
(load 'core/21)
(load "core/21")
(conj {} 15)
(conj {} {15 15})
(conj {} {15 15} {13 14})
(conj {15 15} {13 14})
(def r (range 1 3))
r
(first r)
(reduce + (r))
(reduce + ([1 5]))
(def v [1 1 2])
v
(reduce + v)
(load "core/21")
(require 'core/21)
(require '[core/21])
(:require '[core/21])
(:require [core/21])
(:require ["core/21"])
(core.21/-main)
(divs 1 5 [])
(core.21/divs 1 5 [])
(core.21/divs 1 10 [])
(def a (core.21/divs 1 10 []))
a
(core.21/int-dividers-map (range 1 10) {})
(core.21/divs 1 9 [])
(core.21/int-dividers-map (range 1 11) {})
(load "core/21")
(core.21/int-dividers-map (range 1 11) {})
(defn b (core.21/int-dividers-map (range 1 11) {}))
(def b (core.21/int-dividers-map (range 1 11) {}))
b
(core.21/int-dividers-map (range 1 10000) {})
(core.21/-main)
(core.21/amicable-numbers b [])
(def b (core.21/int-dividers-map (range 1 1000) {}))
b
(core.21/amicable-numbers b [])
(def b (core.21/int-dividers-map (range 1 300) {}))
(core.21/amicable-numbers b [])
(load "core/21")
(core.21/amicable-numbers b [])
(get b (first b))
b
(first b)
(get b (first b))
(first b)
(key (first b))
(val (get b 275))
(val (get 275 b))
(get 275 b)
(get b 275) 
(load "core/21")
(core.21/amicable-numbers b [])
(def b (core.21/int-dividers-map (range 1 10000) {}))
(core.21/amicable-numbers b [])
(key (get 220 b))
(get 220 b)
(get 284 b)
b
(first b)
(key (first b))
b
(get 9063 b)
(get b 9063)
(get b 284)
(get b 220)
(def c [])
c
(conj c 220 284)
(conj [1 4] 220 49465)
(def d (conj [1 4] 220 49465))
(reduce + d)
(load "core/21")
(core.21/-main)
(core.21/amicable-numbers b [])
(load "core/21")
(core.21/amicable-numbers b [])
(get b 220)
(load "core/21")
(core.21/amicable-numbers b [])
(load "core/21")
(core.21/amicable-numbers b [])
(get b 4594)
(get b 2300)
(def y (key (first b)))
y
(def z (get b y))
z
(def z (get b (get b y)))
z
(load "core/21")
(core.21/amicable-numbers b [])
(get b 220)
(get b 284)
(get b (get b 284))
(load "core/21")
(core.21/amicable-numbers b [])
b
(key (first b))
(get b 6398)
(doc if)
(load "core/21")
(core.21/-main)
(load "core/21")
(core.21/-main)
(core.21/amicable-numbers b [])
b
(core.21/amicable-numbers b [])
(= 200 200)
(empty? {1 1})
(empty? {})
b
(core.21/amicable-numbers b [])
(rest b)
b
(rest b)
(dissoc b 9063)
(dissoc b 2140)
b
(dissoc b 4724)
(dissoc b 9063)
(dissoc b 4274)
(load "core/21")
(core.21/amicable-numbers b [])
(distinct (core.21/amicable-numbers b []))
(get b 6)
(get b 5)
(get b 28)
(load "core/21")
(distinct (core.21/amicable-numbers b []))
(core.21/amicable-numbers b [])
(= 6 6)
(= 6 6 true)
(if (= 6 6))
(if (= 6 6) (print "Y") (print "N"))
(doc if)
(and true true)
(and true false)
(!= 6 6)
(<> 6 6)
(=! 6 6)
(= 6 6)
(not= 6 6)
(load "core/21")
(core.21/amicable-numbers b [])
(load "core/21")
(core.21/amicable-numbers b [])
(core.21/-main)
(core.21/amicable-numbers b [])
(core.21/-main)
(reduce + (core.21/amicable-numbers b []))
(core.21/int-dividers-map (range 1 10001) {})
(reduce + (core.21/amicable-numbers b []))
(core.21/-main)
(load "core/21")0
(load "core/21")
(core.21/-main)
(core.21/amicable-numbers (core.21/int-dividers-map (range 1 10001) {}) [])
exit
(doc recur)
